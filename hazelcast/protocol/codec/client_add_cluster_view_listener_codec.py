from hazelcast.protocol.client_message import ClientMessage, PARTITION_ID_FIELD_OFFSET, RESPONSE_BACKUP_ACKS_FIELD_OFFSET, UNFRAGMENTED_MESSAGE, TYPE_FIELD_OFFSET
import hazelcast.protocol.bits as Bits
from hazelcast.protocol.codec.builtin import *
from hazelcast.protocol.codec.custom import *

"""
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
"""

# Generated("96de5d253a9f6e361e7e7f8ea123226b")

# hex: 0x000300
REQUEST_MESSAGE_TYPE = 768
# hex: 0x000301
RESPONSE_MESSAGE_TYPE = 769
REQUEST_INITIAL_FRAME_SIZE = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_BACKUP_ACKS_FIELD_OFFSET + Bits.BYTE_SIZE_IN_BYTES
EVENT_MEMBERS_VIEW_VERSION_FIELD_OFFSET = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
EVENT_MEMBERS_VIEW_INITIAL_FRAME_SIZE = EVENT_MEMBERS_VIEW_VERSION_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
    #hex: 0x000302
EVENT_MEMBERS_VIEW_MESSAGE_TYPE = 770
EVENT_PARTITIONS_VIEW_VERSION_FIELD_OFFSET = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
EVENT_PARTITIONS_VIEW_INITIAL_FRAME_SIZE = EVENT_PARTITIONS_VIEW_VERSION_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
    #hex: 0x000303
EVENT_PARTITIONS_VIEW_MESSAGE_TYPE = 771


def encode_request():
    client_message = ClientMessage.create_for_encode()
    client_message.retryable = False
    client_message.operation_name = "Client.AddClusterViewListener"
    initial_frame = ClientMessage.Frame(bytearray(REQUEST_INITIAL_FRAME_SIZE), UNFRAGMENTED_MESSAGE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, TYPE_FIELD_OFFSET, REQUEST_MESSAGE_TYPE)
    client_message.add(initial_frame)
    return client_message


def decode_response(client_message):
    iterator = client_message.frame_iterator()
    response = dict()
    #empty initial frame
    iterator.next()
    return response


def handle(client_message, handle_members_view_event=None, handle_partitions_view_event=None):
    message_type = client_message.message_type()
    iterator = client_message.frame_iterator()
    if message_type == EVENT_MEMBERS_VIEW_MESSAGE_TYPE and handle_members_view_event is not None:
        initial_frame = iterator.next()
        version = FixedSizeTypesCodec.decode_int(initial_frame.content, EVENT_MEMBERS_VIEW_VERSION_FIELD_OFFSET)
        member_infos = ListMultiFrameCodec.decode(iterator, MemberInfoCodec.decode)
        handle_members_view_event(version, member_infos)
    if message_type == EVENT_PARTITIONS_VIEW_MESSAGE_TYPE and handle_partitions_view_event is not None:
        initial_frame = iterator.next()
        version = FixedSizeTypesCodec.decode_int(initial_frame.content, EVENT_PARTITIONS_VIEW_VERSION_FIELD_OFFSET)
        partitions = EntryListUUIDListIntegerCodec.decode(iterator)
        handle_partitions_view_event(version, partitions)
