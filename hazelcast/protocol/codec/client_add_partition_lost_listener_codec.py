from hazelcast.protocol.client_message import ClientMessage, PARTITION_ID_FIELD_OFFSET, RESPONSE_BACKUP_ACKS_FIELD_OFFSET, UNFRAGMENTED_MESSAGE, TYPE_FIELD_OFFSET
import hazelcast.protocol.bits as Bits
from hazelcast.protocol.codec.builtin import *
from hazelcast.protocol.codec.custom import *
from hazelcast.util import ImmutableLazyDataList

"""
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
"""

# Generated("3b7773cc5e134067329753c9ea7efc13")

# hex: 0x000600
REQUEST_MESSAGE_TYPE = 1536
# hex: 0x000601
RESPONSE_MESSAGE_TYPE = 1537
REQUEST_LOCAL_ONLY_FIELD_OFFSET = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
REQUEST_INITIAL_FRAME_SIZE = REQUEST_LOCAL_ONLY_FIELD_OFFSET + Bits.BOOLEAN_SIZE_IN_BYTES
RESPONSE_RESPONSE_FIELD_OFFSET = RESPONSE_BACKUP_ACKS_FIELD_OFFSET + Bits.BYTE_SIZE_IN_BYTES

RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_RESPONSE_FIELD_OFFSET + Bits.UUID_SIZE_IN_BYTES
EVENT_PARTITION_LOST_PARTITION_ID_FIELD_OFFSET = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
EVENT_PARTITION_LOST_LOST_BACKUP_COUNT_FIELD_OFFSET = EVENT_PARTITION_LOST_PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
EVENT_PARTITION_LOST_SOURCE_FIELD_OFFSET = EVENT_PARTITION_LOST_LOST_BACKUP_COUNT_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
EVENT_PARTITION_LOST_INITIAL_FRAME_SIZE = EVENT_PARTITION_LOST_SOURCE_FIELD_OFFSET + Bits.UUID_SIZE_IN_BYTES
    #hex: 0x000602
EVENT_PARTITION_LOST_MESSAGE_TYPE = 1538


def encode_request(local_only):
    client_message = ClientMessage.create_for_encode()
    client_message.retryable = False
    client_message.operation_name = "Client.AddPartitionLostListener"
    initial_frame = ClientMessage.Frame(bytearray(REQUEST_INITIAL_FRAME_SIZE), UNFRAGMENTED_MESSAGE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, TYPE_FIELD_OFFSET, REQUEST_MESSAGE_TYPE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, PARTITION_ID_FIELD_OFFSET, -1)
    FixedSizeTypesCodec.encode_boolean(initial_frame.content, REQUEST_LOCAL_ONLY_FIELD_OFFSET, local_only)
    client_message.add(initial_frame)
    return client_message


def decode_response(client_message, to_object=None):
    iterator = client_message.frame_iterator()
    response = dict(response=None)
    initial_frame = iterator.next()
    response["response"] = FixedSizeTypesCodec.decode_uuid(initial_frame.content, RESPONSE_RESPONSE_FIELD_OFFSET)
    return response


def handle(client_message, handle_partition_lost_event=None, to_object=None):
    message_type = client_message.get_message_type()
    iterator = client_message.frame_iterator()
    if message_type == EVENT_PARTITION_LOST_MESSAGE_TYPE and handle_partition_lost_event is not None:
        initial_frame = iterator.next()
        partition_id = FixedSizeTypesCodec.decode_int(initial_frame.content, EVENT_PARTITION_LOST_PARTITION_ID_FIELD_OFFSET)
        lost_backup_count = FixedSizeTypesCodec.decode_int(initial_frame.content, EVENT_PARTITION_LOST_LOST_BACKUP_COUNT_FIELD_OFFSET)
        source = FixedSizeTypesCodec.decode_uuid(initial_frame.content, EVENT_PARTITION_LOST_SOURCE_FIELD_OFFSET)
        handle_partition_lost_event(partition_id=partition_id, lost_backup_count=lost_backup_count, source=source)
