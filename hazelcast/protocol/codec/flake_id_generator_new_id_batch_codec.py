from hazelcast.protocol.client_message import ClientMessage, PARTITION_ID_FIELD_OFFSET, RESPONSE_BACKUP_ACKS_FIELD_OFFSET, UNFRAGMENTED_MESSAGE, TYPE_FIELD_OFFSET
import hazelcast.protocol.bits as Bits
from hazelcast.protocol.codec.builtin import *
from hazelcast.protocol.codec.custom import *

"""
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
"""

# Generated("4cc2fddb90991046398fb13aa06b9f49")

# hex: 0x1C0100
REQUEST_MESSAGE_TYPE = 1835264
# hex: 0x1C0101
RESPONSE_MESSAGE_TYPE = 1835265
REQUEST_BATCH_SIZE_FIELD_OFFSET = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
REQUEST_INITIAL_FRAME_SIZE = REQUEST_BATCH_SIZE_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
RESPONSE_BASE_FIELD_OFFSET = RESPONSE_BACKUP_ACKS_FIELD_OFFSET + Bits.BYTE_SIZE_IN_BYTES
RESPONSE_INCREMENT_FIELD_OFFSET = RESPONSE_BASE_FIELD_OFFSET + Bits.LONG_SIZE_IN_BYTES
RESPONSE_BATCH_SIZE_FIELD_OFFSET = RESPONSE_INCREMENT_FIELD_OFFSET + Bits.LONG_SIZE_IN_BYTES

RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_BATCH_SIZE_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES


def encode_request(name, batch_size):
    client_message = ClientMessage.create_for_encode()
    client_message.retryable = True
    client_message.operation_name = "FlakeIdGenerator.NewIdBatch"
    initial_frame = ClientMessage.Frame(bytearray(REQUEST_INITIAL_FRAME_SIZE), UNFRAGMENTED_MESSAGE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, TYPE_FIELD_OFFSET, REQUEST_MESSAGE_TYPE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, REQUEST_BATCH_SIZE_FIELD_OFFSET, batch_size)
    client_message.add(initial_frame)
    StringCodec.encode(client_message, name)
    return client_message


def decode_response(client_message):
    iterator = client_message.frame_iterator()
    response = dict(base=None, increment=None, batchSize=None)
    initial_frame = iterator.next()
    response["base"] = FixedSizeTypesCodec.decode_long(initial_frame.content, RESPONSE_BASE_FIELD_OFFSET)
    response["increment"] = FixedSizeTypesCodec.decode_long(initial_frame.content, RESPONSE_INCREMENT_FIELD_OFFSET)
    response["batchSize"] = FixedSizeTypesCodec.decode_int(initial_frame.content, RESPONSE_BATCH_SIZE_FIELD_OFFSET)
    return response


